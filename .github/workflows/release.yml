name: Build and Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build

    - name: Build Windows executables
      run: |
        npm run build:main
        npm run build:renderer
        npx electron-builder --win --publish never
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: List generated files
      shell: pwsh
      run: |
        Write-Host "Contents of release directory:"
        if (Test-Path "release") { Get-ChildItem release } else { Write-Host "Release directory does not exist" }
        Write-Host "Looking for exe files:"
        Get-ChildItem release -Filter "*.exe" -Recurse -ErrorAction SilentlyContinue

    - name: Create Release and Upload Assets
      if: startsWith(github.ref, 'refs/tags/')
      shell: pwsh
      run: |
        $tagName = "${{ github.ref_name }}"

        # Create release using GitHub CLI (or use existing if it exists)
        try {
          gh release create $tagName --title "Trade Harbour $tagName" --notes "Trade Harbour release $tagName - Download and run the .exe file directly!"
          Write-Host "Release created successfully"
        } catch {
          Write-Host "Release already exists or creation failed, continuing with upload..."
        }

        # Wait a moment for release to be ready
        Start-Sleep -Seconds 2

        # Upload only the main distribution files (not helper files)
        Get-ChildItem release -Filter "*Setup*.exe" -Recurse | ForEach-Object {
          Write-Host "Uploading installer: $($_.FullName)"
          try {
            gh release upload $tagName $_.FullName --clobber
            Write-Host "Successfully uploaded: $($_.Name)"
          } catch {
            Write-Host "Failed to upload: $($_.Name) - $_"
          }
        }

        Get-ChildItem release -Filter "*portable*.exe" -Recurse | ForEach-Object {
          Write-Host "Uploading portable: $($_.FullName)"
          try {
            gh release upload $tagName $_.FullName --clobber
            Write-Host "Successfully uploaded: $($_.Name)"
          } catch {
            Write-Host "Failed to upload: $($_.Name) - $_"
          }
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}