name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.5.6)'
        required: true
        default: 'v1.5.6'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        include:
          - os: windows-latest
            platform: win
            artifact: TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-portable.zip
          - os: macos-latest
            platform: mac
            artifact: TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-mac.dmg
          - os: ubuntu-latest
            platform: linux
            artifact: TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-linux.AppImage

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Build Windows portable
        if: matrix.os == 'windows-latest'
        run: npm run dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build macOS DMG
        if: matrix.os == 'macos-latest'
        run: npm run dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Linux AppImage
        if: matrix.os == 'ubuntu-latest'
        run: npm run dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifact
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: release/*.zip

      - name: Upload macOS artifact
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: release/*.dmg

      - name: Upload Linux artifact
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: release/*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version || github.ref_name }}
          release_name: Trade Harbour ${{ github.event.inputs.version || github.ref_name }} - Multi-Platform Release
          body: |
            üöÄ **Trade Harbour ${{ github.event.inputs.version || github.ref_name }} - Multi-Platform Release**

            ## üì¶ **Downloads Available**
            - **Windows**: Portable ZIP package
            - **macOS**: DMG installer for Intel & Apple Silicon Macs
            - **Linux**: AppImage for all distributions

            ## üéØ **What's New**
            - ‚úÖ **Streamlined Bybit Integration**: Focus on reliable Bybit-only support
            - ‚úÖ **Cross-Platform Support**: Windows, macOS, and Linux builds
            - ‚úÖ **Portable Applications**: No installation required on any platform
            - ‚úÖ **Universal macOS**: Works on both Intel and Apple Silicon Macs

            ## üóÇÔ∏è **Installation Instructions**

            ### Windows
            1. Download `TradeHarbour-*-portable.zip`
            2. Extract to any folder
            3. Run `TradeHarbour.exe`

            ### macOS
            1. Download `TradeHarbour-*-mac.dmg`
            2. Open the DMG file
            3. Drag Trade Harbour to Applications folder
            4. Run from Applications (may need to approve in Security & Privacy)

            ### Linux
            1. Download `TradeHarbour-*-linux.AppImage`
            2. Make executable: `chmod +x TradeHarbour-*.AppImage`
            3. Run directly: `./TradeHarbour-*.AppImage`

            ## üìã **Requirements**
            - **Windows**: Windows 10/11 (64-bit)
            - **macOS**: macOS 10.15+ (Intel & Apple Silicon)
            - **Linux**: Most modern distributions (64-bit)

            ---
            *Built with GitHub Actions for maximum compatibility across all platforms.*
          draft: false
          prerelease: false

      - name: Upload Windows Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: windows-build/TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-portable.zip
          asset_name: TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-portable.zip
          asset_content_type: application/zip

      - name: Upload macOS Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: macos-build/TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-mac.dmg
          asset_name: TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-mac.dmg
          asset_content_type: application/octet-stream

      - name: Upload Linux Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: linux-build/TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-linux.AppImage
          asset_name: TradeHarbour-${{ github.event.inputs.version || github.ref_name }}-linux.AppImage
          asset_content_type: application/octet-stream